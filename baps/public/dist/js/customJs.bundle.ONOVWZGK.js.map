{
  "version": 3,
  "sources": ["../../../../../apps/baps/baps/public/js/customJs.bundle.js"],
  "sourcesContent": ["// // function removePageTItles(){\r\n// //   const  pageTitle = document.querySelector(\".page-title\");\r\n// //     // Start observing changes in the body subtree\r\n// //   observer.observe(document.body, {\r\n// //     childList: true,\r\n// //     subtree: true,\r\n// //   });\r\n\r\n// // }\r\n// // document.addEventListener(\"DOMContentLoaded\", movePageHeadContent);\r\n\r\n// // sliding active bar for ERPNext form tabs (no frappe.ready)\r\n\r\n\r\n\r\n// // from-tab sliding effect\r\n\r\n// document.addEventListener('DOMContentLoaded', function () {\r\n//   function initSlidingTabs(ul) {\r\n//     if (!ul || ul.dataset.slidingTabsInitialized) return;\r\n//     ul.dataset.slidingTabsInitialized = '1';\r\n//     ul.style.position = ul.style.position || 'relative';\r\n\r\n//     // create the highlight bar\r\n//     const bar = document.createElement('div');\r\n//     bar.className = 'sliding-tab-bar';\r\n//     Object.assign(bar.style, {\r\n//       position: 'absolute',\r\n//       bottom: '0',\r\n//       height: '4px',\r\n//       background: 'var(--_primary-bg-color)',\r\n//       borderRadius: '1em 1em 0em 0em',\r\n//       transition: 'transform 200ms ease, width 200ms ease',\r\n//       left: '0',\r\n//       width: '0',\r\n//       zIndex: '1',\r\n//       pointerEvents: 'none'\r\n//     });\r\n//     ul.appendChild(bar);\r\n\r\n//     const update = () => {\r\n//       const active =\r\n//         ul.querySelector('.nav-link.active') ||\r\n//         ul.querySelector('.nav-link');\r\n//       if (!active) return;\r\n//       const linkRect = active.getBoundingClientRect();\r\n//       const ulRect = ul.getBoundingClientRect();\r\n//       const left = linkRect.left - ulRect.left + ul.scrollLeft;\r\n//       bar.style.width = linkRect.width + 'px';\r\n//       bar.style.transform = `translateX(${left}px)`;\r\n//     };\r\n\r\n//     // update on clicks (wait for bootstrap to toggle .active)\r\n//     ul.addEventListener('click', (e) => {\r\n//       const link = e.target.closest('.nav-link');\r\n//       if (link && ul.contains(link)) {\r\n//         setTimeout(update, 150);\r\n//       }\r\n//     });\r\n\r\n//     // update on resize\r\n//     window.addEventListener('resize', update);\r\n\r\n//     // observe active class changes & DOM changes inside the tabs\r\n//     const mo = new MutationObserver(() => update());\r\n//     mo.observe(ul, { subtree: true, childList: true, attributes: true, attributeFilter: ['class'] });\r\n\r\n//     // initial position\r\n//     setTimeout(update, 0);\r\n//   }\r\n\r\n//   function scanAndInit() {\r\n//     document.querySelectorAll('ul.form-tabs, ul.nav-tabs, #form-tabs').forEach(initSlidingTabs);\r\n//   }\r\n\r\n//   // initial scan\r\n//   scanAndInit();\r\n\r\n//   // ERPNext desk is SPA-like; watch for new forms/tabs injected later\r\n//   const bodyObserver = new MutationObserver(() => scanAndInit());\r\n//   bodyObserver.observe(document.body, { childList: true, subtree: true });\r\n\r\n//   // also rescan after Bootstrap tab show (BS4/BS5 attribute variants)\r\n//   document.addEventListener('click', (e) => {\r\n//     if (e.target.closest('a[data-toggle=\"tab\"], a[data-bs-toggle=\"tab\"]')) {\r\n//       setTimeout(scanAndInit, 200);\r\n//     }\r\n//   });\r\n// });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // from-tab sliding effect\r\n\r\n// document.addEventListener('DOMContentLoaded', function () {\r\n//   function initSlidingTabs(ul) {\r\n//     if (!ul || ul.dataset.slidingTabsInitialized) return;\r\n//     ul.dataset.slidingTabsInitialized = '1';\r\n//     ul.style.position = ul.style.position || 'relative';\r\n\r\n//     // create the highlight bar\r\n//     const bar = document.createElement('div');\r\n//     bar.className = 'sliding-tab-bar';\r\n//     Object.assign(bar.style, {\r\n//       position: 'absolute',\r\n//       bottom: '0',\r\n//       height: '4px',\r\n//       background: 'var(--_primary-bg-color)',\r\n//       borderRadius: '1em 1em 0em 0em',\r\n//       transition: 'transform 200ms ease, width 200ms ease',\r\n//       left: '0',\r\n//       width: '0',\r\n//       zIndex: '1',\r\n//       pointerEvents: 'none'\r\n//     });\r\n//     ul.appendChild(bar);\r\n\r\n//     const update = () => {\r\n//       const active =\r\n//         ul.querySelector('.nav-link.active') ||\r\n//         ul.querySelector('.nav-link');\r\n//       if (!active) return;\r\n//       const linkRect = active.getBoundingClientRect();\r\n//       const ulRect = ul.getBoundingClientRect();\r\n//       const left = linkRect.left - ulRect.left + ul.scrollLeft;\r\n//       bar.style.width = linkRect.width + 'px';\r\n//       bar.style.transform = `translateX(${left}px)`;\r\n//     };\r\n\r\n//     // update on clicks (wait for bootstrap to toggle .active)\r\n//     ul.addEventListener('click', (e) => {\r\n//       const link = e.target.closest('.nav-link');\r\n//       if (link && ul.contains(link)) {\r\n//         setTimeout(update, 150);\r\n//       }\r\n//     });\r\n\r\n//     // update on resize\r\n//     window.addEventListener('resize', update);\r\n\r\n//     // observe active class changes & DOM changes inside the tabs\r\n//     const mo = new MutationObserver(() => update());\r\n//     mo.observe(ul, { subtree: true, childList: true, attributes: true, attributeFilter: ['class'] });\r\n\r\n//     // initial position\r\n//     setTimeout(update, 0);\r\n//   }\r\n\r\n//   function scanAndInit() {\r\n//     document.querySelectorAll('ul.form-tabs, ul.nav-tabs, #form-tabs').forEach(initSlidingTabs);\r\n//   }\r\n\r\n//   // initial scan\r\n//   scanAndInit();\r\n\r\n//   // ERPNext desk is SPA-like; watch for new forms/tabs injected later\r\n//   const bodyObserver = new MutationObserver(() => scanAndInit());\r\n//   bodyObserver.observe(document.body, { childList: true, subtree: true });\r\n\r\n//   // also rescan after Bootstrap tab show (BS4/BS5 attribute variants)\r\n//   document.addEventListener('click', (e) => {\r\n//     if (e.target.closest('a[data-toggle=\"tab\"], a[data-bs-toggle=\"tab\"]')) {\r\n//       setTimeout(scanAndInit, 200);\r\n//     }\r\n//   });\r\n// });\r\n\r\n\r\n// // \r\n\r\n// // sidebar false\r\n// document.addEventListener(\"DOMContentLoaded\", function () {\r\n//   const sidebar = document.querySelector(\".sidebar\"); // your sidebar element\r\n//   const toggleBtn = document.querySelector(\".sidebar-toggle-btn\");\r\n//   const toggleIcon = toggleBtn.querySelector(\".sidebar-toggle-icon use\");\r\n\r\n//   // \u2705 Collapse by default\r\n//   sidebar.classList.add(\"collapsed\");\r\n//   toggleIcon.setAttribute(\"href\", \"#es-line-sidebar-expand\");\r\n\r\n//   // \u2705 Toggle on click\r\n//   toggleBtn.addEventListener(\"click\", function () {\r\n//     if (sidebar.classList.contains(\"collapsed\")) {\r\n//       // Expand\r\n//       sidebar.classList.remove(\"collapsed\");\r\n//       toggleIcon.setAttribute(\"href\", \"#es-line-sidebar-collapse\");\r\n//       console.log(\"collapsed sidebar\")\r\n//     } else {\r\n//       // Collapse\r\n//       sidebar.classList.add(\"collapsed\");\r\n//       toggleIcon.setAttribute(\"href\", \"#es-line-sidebar-expand\");\r\n//       console.log(\"expand  sidebar\")\r\n\r\n//     }\r\n//   });\r\n// });\r\n\r\n\r\n\r\n// function removePageTItles(){\r\n//   const  pageTitle = document.querySelector(\".page-title\");\r\n//     // Start observing changes in the body subtree\r\n//   observer.observe(document.body, {\r\n//     childList: true,\r\n//     subtree: true,\r\n//   });\r\n\r\n// }\r\n// document.addEventListener(\"DOMContentLoaded\", movePageHeadContent);\r\n\r\n// sliding active bar for ERPNext form tabs (no frappe.ready)\r\n\r\n\r\n\r\n// from-tab sliding effect\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n  function initSlidingTabs(ul) {\r\n    if (!ul || ul.dataset.slidingTabsInitialized) return;\r\n    ul.dataset.slidingTabsInitialized = '1';\r\n    ul.style.position = ul.style.position || 'relative';\r\n\r\n    // create the highlight bar\r\n    const bar = document.createElement('div');\r\n    bar.className = 'sliding-tab-bar';\r\n    Object.assign(bar.style, {\r\n      position: 'absolute',\r\n      bottom: '0',\r\n      height: '4px',\r\n      background: 'orange',\r\n      borderRadius: '1em 1em 0em 0em',\r\n      transition: 'transform 200ms ease, width 200ms ease',\r\n      left: '0',\r\n      width: '0',\r\n      zIndex: '1',\r\n      pointerEvents: 'none'\r\n    });\r\n    ul.appendChild(bar);\r\n    console.log(\"tab active slideer insterd\")\r\n\r\n    const update = () => {\r\n      const active =\r\n        ul.querySelector('.nav-link.active') ||\r\n        ul.querySelector('.nav-link');\r\n      if (!active) return;\r\n      const linkRect = active.getBoundingClientRect();\r\n      const ulRect = ul.getBoundingClientRect();\r\n      const left = linkRect.left - ulRect.left + ul.scrollLeft;\r\n      bar.style.width = linkRect.width + 'px';\r\n      bar.style.transform = `translateX(${left}px)`;\r\n    };\r\n\r\n    // update on clicks (wait for bootstrap to toggle .active)\r\n    ul.addEventListener('click', (e) => {\r\n      const link = e.target.closest('.nav-link');\r\n      if (link && ul.contains(link)) {\r\n        setTimeout(update, 150);\r\n      }\r\n    });\r\n\r\n    // update on resize\r\n    window.addEventListener('resize', update);\r\n\r\n    // observe active class changes & DOM changes inside the tabs\r\n    const mo = new MutationObserver(() => update());\r\n    mo.observe(ul, { subtree: true, childList: true, attributes: true, attributeFilter: ['class'] });\r\n\r\n    // initial position\r\n    setTimeout(update, 0);\r\n  }\r\n\r\n  function scanAndInit() {\r\n    document.querySelectorAll('ul.form-tabs, ul.nav-tabs, #form-tabs').forEach(initSlidingTabs);\r\n  }\r\n\r\n  // initial scan\r\n  scanAndInit();\r\n\r\n  // ERPNext desk is SPA-like; watch for new forms/tabs injected later\r\n  const bodyObserver = new MutationObserver(() => scanAndInit());\r\n  bodyObserver.observe(document.body, { childList: true, subtree: true });\r\n\r\n  // also rescan after Bootstrap tab show (BS4/BS5 attribute variants)\r\n  document.addEventListener('click', (e) => {\r\n    if (e.target.closest('a[data-toggle=\"tab\"], a[data-bs-toggle=\"tab\"]')) {\r\n      setTimeout(scanAndInit, 200);\r\n    }\r\n  });\r\n});\r\n\r\n\r\n\r\n//  login password\r\n\r\n// document.addEventListener(\"DOMContentLoaded\", () => {\r\n//     const injectToggle = (input) => {\r\n//         // avoid duplicate injection\r\n//         if (input.parentNode.querySelector(\".toggle-password\")) return;\r\n\r\n//         let toggle = document.createElement(\"div\");\r\n//         toggle.classList.add(\"toggle-password\");\r\n//         toggle.innerHTML = `\r\n//             <svg class=\"icon icon-sm\" aria-hidden=\"true\">\r\n//                 <use href=\"#icon-unhide\"></use>\r\n//             </svg>\r\n//         `;\r\n\r\n//         // style position relative so we can absolutely position the icon\r\n//         input.parentNode.style.position = \"relative\";\r\n//         toggle.style.position = \"absolute\";\r\n//         toggle.style.right = \"10px\";\r\n//         toggle.style.top = \"50%\";\r\n//         toggle.style.transform = \"translateY(-50%)\";\r\n//         toggle.style.cursor = \"pointer\";\r\n\r\n//         input.parentNode.appendChild(toggle);\r\n\r\n//         // toggle logic\r\n//         toggle.addEventListener(\"click\", () => {\r\n//             if (input.type === \"password\") {\r\n//                 input.type = \"text\";\r\n//                 toggle.querySelector(\"use\").setAttribute(\"href\", \"#icon-hide\");\r\n//             } else {\r\n//                 input.type = \"password\";\r\n//                 toggle.querySelector(\"use\").setAttribute(\"href\", \"#icon-unhide\");\r\n//             }\r\n//         });\r\n//     };\r\n\r\n//     // Initial injection\r\n//     document.querySelectorAll('input[type=\"password\"]').forEach(injectToggle);\r\n\r\n//     // Observe for dynamically added inputs\r\n//     const observer = new MutationObserver((mutations) => {\r\n//         mutations.forEach((mutation) => {\r\n//             mutation.addedNodes.forEach((node) => {\r\n//                 if (node.nodeType === 1) {\r\n//                     // direct input\r\n//                     if (node.matches?.('input[type=\"password\"]')) {\r\n//                         injectToggle(node);\r\n//                     }\r\n//                     // nested inputs inside added container\r\n//                     node.querySelectorAll?.('input[type=\"password\"]').forEach(injectToggle);\r\n//                 }\r\n//             });\r\n//         });\r\n//     });\r\n\r\n//     observer.observe(document.body, { childList: true, subtree: true });\r\n// });\r\n\r\n\r\n//     // Initial injection\r\n\r\n//     // Observe for dynamically added inputs\r\n//     const observer = new MutationObserver((mutations) => {\r\n//         mutations.forEach((mutation) => {\r\n//             mutation.addedNodes.forEach((node) => {\r\n//                 if (node.nodeType === 1) {\r\n//                     // direct input\r\n//                     if (node.matches?.('input[type=\"password\"]')) {\r\n//                         injectToggle(node);\r\n//                     }\r\n//                     // nested inputs inside added container\r\n//                     node.querySelectorAll?.('input[type=\"password\"]').forEach(injectToggle);\r\n//                 }\r\n//             });\r\n//         });\r\n//     });\r\n\r\n//     observer.observe(document.body, { childList: true, subtree: true });\r\n\r\n\r\n\r\n    \r\n\r\n// \r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n  console.log(\"Awesomplete shift start\");\r\n\r\n  const observer = new MutationObserver(() => {\r\n    // find focused input inside form-grid that has awesomplete\r\n    const activeInput = document.querySelector(\r\n      '.form-grid .awesomplete input:focus[aria-owns]'\r\n    );\r\n\r\n    if (activeInput) {\r\n      const listId = activeInput.getAttribute(\"aria-owns\");\r\n      const list = document.getElementById(listId);\r\n\r\n      if (list) {\r\n        console.log(\"Focused input:\", activeInput.dataset.fieldname, activeInput);\r\n        console.log(\"Dropdown list:\", listId, list);\r\n\r\n        // move list to <body> so it's not clipped by table/grid\r\n        if (!list.dataset.shifted) {\r\n          list.dataset.shifted = \"1\"; \r\n          document.body.appendChild(list);\r\n\r\n          // reset base styles\r\n          list.style.position = \"absolute\";\r\n          list.style.background= \"white\";\r\n          list.style.width=\"350px\"\r\n          list.style.border=\"1.4px solid whitesmoke\"\r\n          list.style.zIndex = \"9999\"; // ensure it's above form\r\n          list.hidden = false;\r\n        }\r\n\r\n        // always recalc position relative to input\r\n        const rect = activeInput.getBoundingClientRect();\r\n        list.style.top = rect.bottom + window.scrollY + \"px\";\r\n        list.style.left = rect.left + window.scrollX + \"px\";\r\n        list.style.width = rect.width + \"px\";\r\n      }\r\n    }\r\n  });\r\n\r\n  observer.observe(document.body, {\r\n    childList: true,\r\n    subtree: true,\r\n  });\r\n});\r\n\r\n\r\n// document.addEventListener(\"DOMContentLoaded\", function () {\r\n//   console.log(\"Awesomplete shift start\");\r\n\r\n//   const observer = new MutationObserver(() => {\r\n//     // only pick lists inside form-grid\r\n//     const list = document.querySelector(\r\n//       '.form-grid .scrollable-xx-xxxx ul[id^=\"awesomplete_list_\"]:not([data-shifted])'\r\n//     );\r\n//     const target = document.querySelector('.form-grid .scrollable-xx-xxxx');\r\n\r\n//     if (list && target) {\r\n//       list.dataset.shifted = \"1\"; // mark so we don't move twice\r\n//       target.appendChild(list);\r\n\r\n//       // reset styles\r\n//       list.style.position = \"absolute\";\r\n//       list.style.top = \"100%\";  // default below input\r\n//       list.style.left = \"0\";\r\n//       list.style.width = \"250px\"; // force width if needed\r\n//       list.hidden = false;\r\n\r\n//       console.log(\"Awesomplete shifted (form-grid only)\");\r\n\r\n//       // Reposition near the active input inside form-grid\r\n//       const activeInput = target.querySelector(\".awesomplete input:focus\");\r\n//       if (activeInput) {\r\n//         const rect = activeInput.getBoundingClientRect();\r\n//         const gridRect = target.getBoundingClientRect();\r\n//         list.style.top = rect.bottom - gridRect.top + \"px\";\r\n//         list.style.left = rect.left - gridRect.left + \"px\";\r\n//         list.style.width = rect.width + \"px\";\r\n//       }\r\n//     }\r\n//   });\r\n\r\n//   observer.observe(document.body, {\r\n//     childList: true,\r\n//     subtree: true,\r\n//   });\r\n// });\r\n\r\n"],
  "mappings": "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",
  "names": []
}
